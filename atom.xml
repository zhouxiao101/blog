<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记录</title>
  
  <subtitle>敲代码的小行家</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-27T02:44:07.486Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>周潇</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React生命周期</title>
    <link href="http://yoursite.com/2018/07/24/React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2018/07/24/React生命周期/</id>
    <published>2018-07-24T06:47:29.777Z</published>
    <updated>2018-07-27T02:44:07.486Z</updated>
    
    <content type="html"><![CDATA[<p>1,getDefaultProps()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设置默认的props，也可以用defaultProps设置组件的默认属性。</span><br></pre></td></tr></table></figure></p><p>2,getInitialState()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在使用es6的class语法时是没有这个钩子函数的，可以直接在constructor中定义this.state.</span><br></pre></td></tr></table></figure></p><p>3,componentWillMount()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">组件初始化时只调用，以后组件更新不调用，整个生命周期只调用一次，此时可以修改state.</span><br></pre></td></tr></table></figure></p><p>4,render()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react最重要的步骤，创建虚拟dom，进行diff算法，更新dom树都在此进行。此时就不能更改state了。</span><br></pre></td></tr></table></figure></p><p>5，componentDidMount()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">组件渲染之后调用，只调用一次</span><br></pre></td></tr></table></figure></p><p>6，componentWillReceiveProps(nextProps)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">组件初始化时不调用，组件接受新的props时调用</span><br></pre></td></tr></table></figure></p><p>7，shouldComponentUpdate(nextProps,nextState)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">react性能优化非常重要的一环。</span><br><span class="line">组件接受新的state或者props时调用，我们可以设置在此对比前后两个props和state是否相同，</span><br><span class="line">如果相同则返回false组织更新，因为相同的属性状态一定会生成相同的dom树，这样就不需要</span><br><span class="line">创造新的dom树和旧的dom树进行diff算法对比，节省大量性能，尤其是在dom结构复杂的时候</span><br></pre></td></tr></table></figure></p><p>8,componentWillUpdata(nextProps,nextState)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">组件初始化时不调用，只有在组件将要更新时才调用，此时可以修改state</span><br></pre></td></tr></table></figure></p><p>9，render()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">组件渲染</span><br></pre></td></tr></table></figure></p><p>10,componentDidUpdate()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">组件初始化时不调用，组件更新完成后调用，此时可以获取dom节点。</span><br></pre></td></tr></table></figure></p><p>11,componentWillUnmount()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">组件将要卸载时调用，一些事件监听和定时器需要在此时清除</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1,getDefaultProps()&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td c
      
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>面试总结（一）</title>
    <link href="http://yoursite.com/2018/07/24/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2018/07/24/面试题总结（一）/</id>
    <published>2018-07-24T06:30:29.865Z</published>
    <updated>2018-07-27T09:12:18.505Z</updated>
    
    <content type="html"><![CDATA[<p>1，严格模式和非严格模式有什么区别？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">严格模式的编译指示： &quot;use strict&quot;</span><br><span class="line">1,不使用var声明变量严格模式中将不通过，在循环中如果没有声明变量在非严格模式中很危险，i 会不小心溢出成为全局变量</span><br><span class="line">但在严格模式中会报错，严格模式中变量必须显示声明(var/let/const)</span><br><span class="line">2,JS中作用域有两种，全局作用域和函数作用域。</span><br><span class="line">严格模式带来了第三种作用域：eval作用域，则任何使用&apos;eval&apos;的操作都会被禁止,(eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码,不常用容易报错)，</span><br><span class="line">在严格模式下，arguments和eval是关键字，不能被修改，不能做变量处理</span><br><span class="line">3,对象有重名的属性将报错</span><br><span class="line">4,函数有重名的参数将报错，在严格模式下，函数的形参也不可以同名</span><br><span class="line">5,call/apply/bind的第一个参数为null/undefined时，this为null/undefined</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>2，同步和异步的区别<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">同步就是后一个任务等待前一个任务结束再执行。程序的执行顺序与任务的排列顺序是一致的，同步的；</span><br><span class="line">异步就是后一个任务不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的，异步的；</span><br><span class="line">setTimeout和setInterval都是异步。</span><br></pre></td></tr></table></figure></p><p>3，ajax的优缺点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">ajax的优点：</span><br><span class="line">    一，无刷新更新数据</span><br><span class="line">    AJAX最大优点就是能在不刷新整个页面的前提下与服务器通信维护数据。这使得Web应用程序更为迅捷地响应用户交互，并避免了在网络上发送那些没有改变的信息，减少用户等待时间，带来非常好的用户体验。</span><br><span class="line">    二，异步与服务器通信。</span><br><span class="line">    AJAX使用异步方式与服务器通信，不需要打断用户的操作，具有更加迅速的响应能力。优化了Browser和Server之间的沟通，减少不必要的数据传输、时间及降低网络上数据流量。</span><br><span class="line">    三，前端和后端负载均衡</span><br><span class="line">    AJAX可以把以前一些服务器负担的工作转嫁到客户端，利用客户端闲置的能力来处理，减轻服务器和带宽的负担，节约空间和宽带租用成本。并且减轻服务器的负担，AJAX的原则是“按需取数据”，可以最大程度的减少冗余请求和响应对服务器造成的负担，提升站点性能。</span><br><span class="line">    四，基于标准被广泛支持</span><br><span class="line">    AJAX基于标准化的并被广泛支持的技术，不需要下载浏览器插件或者小程序，但需要客户允许JavaScript在浏览器上执行。随着Ajax的成熟，一些简化Ajax使用方法的程序库也相继问世。同样，也出现了另一种辅助程序设计的技术，为那些不支持JavaScript的用户提供替代功能。</span><br><span class="line">    五，界面与应用分离</span><br><span class="line">    Ajax使WEB中的界面与应用分离（也可以说是数据与呈现分离），有利于分工合作、减少非技术人员对页面的修改造成的WEB应用程序错误、提高效率、也更加适用于现在的发布系统。</span><br><span class="line">ajax的缺点：</span><br><span class="line">    一，AJAX干掉了Back和History功能，即对浏览器机制的破坏。 </span><br><span class="line">    在动态更新页面的情况下，用户无法回到前一个页面状态，因为浏览器仅能记忆历史记录中的静态页面。一个被完整读入的页面与一个已经被动态修改过的页面之间的差别非常微妙；用户通常会希望单击后退按钮能够取消他们的前一次操作，但是在Ajax应用程序中，这将无法实现。  </span><br><span class="line">    二，AJAX的安全问题。 </span><br><span class="line">    Ajax技术就如同对企业数据建立了一个直接通道。这使得开发者在不经意间会暴露比以前更多的数据和服务器逻辑</span><br><span class="line">    三，对搜索引擎支持较弱。</span><br><span class="line">    对搜索引擎的支持比较弱。如果使用不当，AJAX会增大网络数据的流量，从而降低整个系统的性能。</span><br><span class="line">    四，违背URL和资源定位的初衷。</span><br><span class="line">    例如，我    给你一个URL地址，如果采用了Ajax技术，也许你在该URL地址下面看到的和我在这个URL地址下看到的内容是不同的。这个和资源定位的初衷是相背离的。</span><br><span class="line">```  </span><br><span class="line">4，ajax多并发怎么处理</span><br><span class="line">```text</span><br><span class="line">回调:只适合并发数少的情况，多层嵌套回调会让代码的可读性大大降低</span><br><span class="line">ajax改为同步:如在jquery中将async参数设置为false</span><br><span class="line">回调计数:简单一点的可以设置计数器，每完成一个异步函数加1，或者设置一个数组，每执行完一个异步函数更新数组。</span><br></pre></td></tr></table></figure></p><p>2，ES6中的类和构造函数的区别</p><p>6，常用的几种算法</p><p>7，描述事件委托处理机制</p><p>还可以称为事件代理，把原本需要绑定的事件委托给父元素，让父元素担当事件监听的职务，事件代理的原理是DOM事件冒泡。使用事件委托的好处是可以提高性能。</p><p>延伸：事件冒泡就是元素自身的事件被触发后，如果父元素有相同的事件，如onclick事件，那么元素本身的触发状态就会传递，也就是冒到父元素，父元素的相同事件也会一级一级根据嵌套关系向外触发，指导document/window，冒泡过程。</p><p>8，前端如何实现模块化</p><p>9，jsonp工作原理</p><p>10，CMD与AMD比较</p><p>11，css合并方法</p><p>12，简述css盒子模型</p><p>13，圣杯布局和双飞翼布局的理解和区别</p><p>14，如何实现前后端分离协同开发</p><p>15，前端性能优化的一些方法</p><p>16，对CSRF的理解</p><p>17，如何应用一个前端框架在项目中</p><p>18，expires,cache-control,last-modified,etag 如何选择使用</p><p>19，递归</p><p>20，闭包</p><p>函数执行的时候会形成一个私有作用域，保护里面的私有变量不受外界干扰，这种保护机制叫做闭包。</p><p>21，常见的HTTP状态码</p><p>1xx：临时响应。表示临时响应并需要请求者继续执行操作的状态码</p><p>2xx：成功。表示成功处理了请求的状态码</p><p>3xx：重定向。要完成请求需要进一步操作</p><p>4xx：请求错误。这些状态码表示请求出错，妨碍了服务器的处理</p><p>5xx：服务器错误。这些状态吗表示服务器在处理请求的时候发生内部错误。</p><p>200（成功）：服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。</p><p>301（永久移动）：请求的网页已永久移动到新位置。 </p><p>302（临时移动）：服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。</p><p>304（未修改）：自从上次请求后，请求的网页未修改过。</p><p>400（错误请求）：服务器不理解请求的语法。</p><p>404（未找到）：服务器找不到请求的网页。</p><p> 500（服务器内部错误）：服务器遇到错误，无法完成请求。</p><p>503（服务不可用）：服务器目前无法使用（由于超载或停机维护）。</p><p>22，怎么区分react，angular，vue 什么情况下用</p><p>23，变量提声</p><p>预解释。在当前作用域中，JS代码自上而下执行之前，浏览器会把带有var/function关键字的，进行提前声明定义，</p><p>24，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1，严格模式和非严格模式有什么区别？&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="面试总结" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数组去重</title>
    <link href="http://yoursite.com/2018/06/28/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
    <id>http://yoursite.com/2018/06/28/数组去重/</id>
    <published>2018-06-28T07:59:58.549Z</published>
    <updated>2018-07-27T02:43:09.162Z</updated>
    
    <content type="html"><![CDATA[<!-- 数组去重的四种方法 --><blockquote><p>方案一：<br>遍历数组中的每一项，拿每一项和它后面的项依次比较，如果相同了，则把相同的这一项在原来数组中删除<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ary=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;ary.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> cur=ary[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j=i+<span class="number">1</span>;j&lt;ary.length;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur==ary[j])&#123;</span><br><span class="line">            ary.splice(j,<span class="number">1</span>)</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>方案二：<br>利用indexOf来验证当前数组中是否包含某一项，包含把当前项删除掉(不兼容IE6~8)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ary=[<span class="number">5</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;ary.length;i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> cur=ary[i];</span><br><span class="line">    <span class="keyword">var</span> next=ary.slice(i+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(next.indexOf(cur)&gt;<span class="number">-1</span>)&#123;</span><br><span class="line">        ary.splice(i,<span class="number">1</span>);</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(ary.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>方案三：<br>遍历数组中的每一项，把每一项作为新对象的属性名和属性值存储起来，例如：当前项1，对象中存储{1:1}<br>在每一次向对象中存储之前，首先看一下原有对象中是否包含了这个属性(<code>typeof obj[xxx]===&#39;undefined&#39;说明当前对象中没有xxx这个属性</code>)，如果已经存在这个属性说明数组中的当前项是重复的(1-在原有数组中删除这一项 2-不再像对象中存储这个结果)，如果不存在，把当前项作为对象的属性名和属性值存储进去<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ary=[<span class="number">5</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,];</span><br><span class="line"><span class="keyword">var</span> obj=&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;ary.length;i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> cur=ary[i];</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[cur]!==<span class="string">'undefined'</span>)&#123;</span><br><span class="line">        ary[i]=ary[ary.length<span class="number">-1</span>];<span class="comment">//用splice删除当前项，会让后面所有项向前挪一位（用最后一项代替重复项，后面所有项不受影响）</span></span><br><span class="line">        ary.length--;<span class="comment">//删除数组最后一项</span></span><br><span class="line">        i--;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    obj[cur]=cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>方案四：<br>相邻比较法，首先给数组进行排序，然后相邻两项比较，相同的话把后一项在数组中去掉</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ary=[<span class="number">5</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,];</span><br><span class="line">ary.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> aryCur=[ary[<span class="number">0</span>]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;ary.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(ary[i]!==aryCur[aryCur.length<span class="number">-1</span>])&#123;</span><br><span class="line">        aryCur.push(ary[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 数组去重的四种方法 --&gt;
&lt;blockquote&gt;
&lt;p&gt;方案一：&lt;br&gt;遍历数组中的每一项，拿每一项和它后面的项依次比较，如果相同了，则把相同的这一项在原来数组中删除&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>数组基础</title>
    <link href="http://yoursite.com/2018/06/28/Array/"/>
    <id>http://yoursite.com/2018/06/28/Array/</id>
    <published>2018-06-28T07:56:24.575Z</published>
    <updated>2018-07-27T02:41:02.473Z</updated>
    
    <content type="html"><![CDATA[<!-- 数组基础 --><blockquote><p>类数组：类似于数组，但是不是数组<br>1.通过getElementsByTagName获取的元素集合是类数组<br>2.函数中的实参集合arguments也是类数组</p></blockquote><blockquote><p>for循环只能遍历到数组私有的一些属性，而for in 循环可以把一些自定义的公共属性也能遍历到</p></blockquote><p>####数组中的常用方法<br><code>console.dir(Array.prototype)</code>数组中的方法都定义在原型上，通过dir可以查看数组中的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//=&gt;增加</span><br><span class="line">1.push:向数组的末尾追加新内容</span><br><span class="line">    参数：一到多个，任何数据类型都可以</span><br><span class="line">    返回值：新增后数组的长度</span><br><span class="line">    原有数组发生改变</span><br><span class="line">2.unshift:向数组开头追加新内容</span><br><span class="line">    参数：需要追加的内容，可以是多个任何数据类型的值</span><br><span class="line">    返回值：新增后数组的长度</span><br><span class="line">    原有数组发生改变 </span><br><span class="line">3.把数组当做一个普通的对象，使用对象键值对的操作，给其设置新的属性（索引）</span><br><span class="line">  ary[ary.length]=xxx 向数组的末尾追加了新的内容</span><br><span class="line">  </span><br><span class="line">//=&gt;删除</span><br><span class="line">1.pop:删除数组最后一项</span><br><span class="line">    参数：无</span><br><span class="line">    返回值：被删除的那一项</span><br><span class="line">    原有数组发生改变</span><br><span class="line">2.shift:删除数组第一项</span><br><span class="line">    参数：无</span><br><span class="line">    返回值：被删除的那一项</span><br><span class="line">    原数组发生改变</span><br><span class="line">3.把数组当做普通的对象操作</span><br><span class="line">    delete删除：delete ary[索引] 删除指定索引这一项</span><br><span class="line">    当前想被删除后，原有数组其它项的索引不会改变</span><br><span class="line">    当前数组的length也不会改变</span><br><span class="line">    </span><br><span class="line">    ary.length--;删除数组最后一项</span><br><span class="line">    </span><br><span class="line">//=&gt; splice:数组中内置的方法，可以实现数组的增加，修改，删除</span><br><span class="line">    splice实现删除</span><br><span class="line">        splice(n,m)：从索引n开始删除m个  m不写是删除到数组的末尾，</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 数组基础 --&gt;
&lt;blockquote&gt;
&lt;p&gt;类数组：类似于数组，但是不是数组&lt;br&gt;1.通过getElementsByTagName获取的元素集合是类数组&lt;br&gt;2.函数中的实参集合arguments也是类数组&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockqu
      
    
    </summary>
    
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/06/28/hello-world/"/>
    <id>http://yoursite.com/2018/06/28/hello-world/</id>
    <published>2018-06-28T07:41:51.539Z</published>
    <updated>2018-06-28T07:41:51.540Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
